<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vote Share</title>
  <style>
    @font-face {
      font-family: 'Radio-Canada';
      src: url('img/fonts/RadioCanada-Variable.ttf') format('truetype');
    }

    @font-face {
      font-family: 'Radio-Canada Italic';
      src: url('img/fonts/RadioCanada-Italic-Variable.ttf') format('truetype');
    }

    body {
      padding: 0;
      margin: 0;
      overflow: hidden;
      position: relative;
      font-family: 'Radio-Canada', sans-serif;
      background: black;
    }

    /* Vote Share Container */
    .container {
      height: 160px;
      width: 800px;
      background: black;
      display: flex;
      justify-content: flex-start;
      overflow: hidden;
      position: absolute;
      bottom: 0; /* Position at the bottom */
      left: 0;
      transform: translateY(100%); /* Initially hidden below */
      z-index: 10;
      transition: transform 0.5s ease-in-out;
    }

    .container.active {
      transform: translateY(0); /* Slide up into view */
    }

    /* Title */
    .title {
      position: absolute;
      top: -21px;
      width: 800px;
    }

    .title h1 {
      text-align: center;
      color: white;
      font-size: 30px;
    }

    /* Party */
    .party {
      display: flex;
      flex-direction: column;
      padding-left: 10px;
      flex: 1;
      color: white;
      margin-top: 30px;
      opacity: 1;
      transform: translateY(0px);
      transition: transform 0.5s ease, opacity 0.5s ease;
    }

    .container.active .party {
      opacity: 1;
      transform: translateY(0);
    }

    /* Existing Party Color Styles */
    .party:not(:first-child) {
      margin-left: 1px;
    }

    .party-color-PC {
      background: #1C4F80;
    }

    .party-color-LIB {
      background: #B02229;
    }

    .party-color-NDP {
      background: #E87504;
    }

    .party-color-GRN {
      background: #3D9B35;
    }

    .party-color-IND {
      background: #6D777E;
    }

    .party-name {
      font-weight: 500;
      font-size: 30px;
      text-transform: uppercase;
      position: relative;
      top: 15px;
      left: 3px;
    }

    .party-vote-share {
      font-weight: 800;
      font-size: 70px;
      position: relative;
    }

    .percent {
      position: relative;
      top: -20px;
      font-size: 40px;
    }

    /* Background Container */
    .container-background {
      position: absolute;
      top: 0;
      left: 0;
      width: 800px;
      height: 160px;
      background: #282a32;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
      z-index: 1;
    }

    .wordmark {
      max-height: 140px;
    }

    @keyframes float {
      0%, 100% {
        transform: translateY(0);
      }
      50% {
        transform: translateY(-30px);
      }
    }

    @keyframes float-alt {
      0%, 100% {
        transform: translateY(0);
      }
      50% {
        transform: translateY(-10px);
      }
    }

    .shape-1 {
      height: 150px;
      width: 60px;
      position: absolute;
      left: 60px;
      bottom: -40px;
      animation: float 7s ease-in infinite;
    }

    .shape-2 {
      height: 140px;
      width: 60px;
      position: absolute;
      right: 40px;
      top: -20px;
      animation: float 9s ease-in-out infinite; 
    }

    .shape-3 {
      height: 100px;
      width: 40px;
      position: absolute;
      right: 130px;
      top: -30px;
      animation: float-alt 5s ease-in-out infinite;
    }

    /* Controls */
    .controls-container {
      opacity: 0;
      position: absolute;
      top: 250px;
      left: 10px;
    }
  </style>
</head>
<body>
  <div id="wrapper">
    <!-- Background -->
    <div class="container-background">
      <img src="/img/images/NS_VOTES.png" alt="Nova Scotia Votes" class="wordmark">
      <div class="party-color-PC shape-1"></div>
      <div class="party-color-LIB shape-2"></div>
      <div class="party-color-NDP shape-3"></div>
      <div class="party-color-GRN shape-4"></div>
    </div>

    <!-- Vote Share -->
    <div class="container">
      <div class="title">
        <h1>Share of Vote</h1>
      </div>
      <div class="party party-color-PC">
        <div class="party-name pc">PC</div>
        <div class="party-vote-share">0.0<span class="percent">%</span></div>
      </div>
      <div class="party party-color-NDP">
        <div class="party-name">NDP</div>
        <div class="party-vote-share">0.0<span class="percent">%</span></div>
      </div>
      <div class="party party-color-LIB">
        <div class="party-name">LIB</div>
        <div class="party-vote-share">0.0<span class="percent">%</span></div>
      </div>
      <div class="party party-color-GRN">
        <div class="party-name">GRN</div>
        <div class="party-vote-share">0.0<span class="percent">%</span></div>
      </div>
    </div>
  </div>

  <!-- Controls -->
  <div class="controls-container">
    <button type="button" id="voteShareBtn">Vote Share</button>
    <button type="button" id="defaultBtn">Default</button>
  </div>

  <!-- Script -->
  <script>
    const voteShareBtn = document.getElementById('voteShareBtn');
    const defaultBtn = document.getElementById('defaultBtn');
    const voteShareContainer = document.querySelector('.container');
    const defaultContainer = document.querySelector('.container-background');

    // Show Vote Share Container
    function showVoteShare() {
      voteShareContainer.classList.remove('active');
    }

    // Hide Vote Share Container
    function hideVoteShare() {
      voteShareContainer.classList.add('active');
    }

    // Event Listeners for Buttons
    voteShareBtn.addEventListener('click', showVoteShare);
    defaultBtn.addEventListener('click', hideVoteShare);

    // WebSocket Connection ------------------ Change to IP address on-site
    const socket = new WebSocket('ws://localhost:8081');

    socket.addEventListener('open', function (event) {
      console.log('Connected to the WebSocket server');
    });

    socket.addEventListener('message', function (event) {
      const data = JSON.parse(event.data);
      if (data.PartyNumber === 0) {
        hideVoteShare();
      } else {
        updateHTML(data);
        showVoteShare();
      }
    });

    // Update HTML Based on WebSocket Data
    function updateHTML(data) {
      console.log(data);

      const partyStandings = data.PartyStandings; // Get PartyStandings object
      const partyNumber = data.PartyNumber; // Get PartyNumber

      const parties = partyStandings.Parties || []; // Ensure you have the array
      const selectedParties = parties.slice(0, partyNumber); // Take only the required number of parties

      const partyContainer = document.querySelector('.container'); // Select the container to append parties
      partyContainer.textContent = ''; // Clear previous entries

      // Create and Append Title
      const titleElement = document.createElement('div');
      titleElement.className = 'title';
      const headerElement = document.createElement('h1');
      headerElement.textContent = 'Share of Vote';
      titleElement.appendChild(headerElement);
      partyContainer.appendChild(titleElement);

      // Create and Append Party Elements
      selectedParties.forEach((party) => {
        const totalVotesPercentage = calculateTotalVotesPercentage(party, partyStandings.CurrentTotalVotes);

        // Create the party element
        const partyElement = document.createElement('div');
        partyElement.classList.add('party', `party-color-${party.EnglishCode}`); // Replace with your color logic if needed

        // Create the party name element
        const partyNameElement = document.createElement('div');
        partyNameElement.classList.add('party-name');
        partyNameElement.textContent = party.EnglishCode; // Set party name

        // Create the party vote share element
        const partyVoteShareElement = document.createElement('div');
        partyVoteShareElement.classList.add('party-vote-share');
        partyVoteShareElement.textContent = `${totalVotesPercentage.toFixed(1)}`; // Set vote percentage
        const percentElement = document.createElement('span');
        percentElement.classList.add('percent');
        percentElement.textContent = '%';
        partyVoteShareElement.appendChild(percentElement);

        // Append name and vote share to the party element
        partyElement.appendChild(partyNameElement);
        partyElement.appendChild(partyVoteShareElement);

        // Append the party element to the container
        partyContainer.appendChild(partyElement);
      });

      // If the container is active, re-trigger animations for new content
      if (voteShareContainer.classList.contains('active')) {
        // Force reflow to restart CSS animations
        voteShareContainer.classList.remove('active');
        void voteShareContainer.offsetWidth; // Trigger reflow
        voteShareContainer.classList.add('active');
      }
    }

    // Calculate Vote Percentage
    function calculateTotalVotesPercentage(party, currentTotalVotes) {
      if (currentTotalVotes > 0) {
        return (party.CurrentVotes / currentTotalVotes) * 100; // Calculate percentage
      }
      return 0; // Return 0 if total votes is 0 to avoid division by zero
    }
  </script>
</body>
</html>
